"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var fs_1 = require("fs");
var output_printer_1 = __importDefault(require("../utils/output-printer"));
var command_result_1 = __importDefault(require("../utils/command-result"));
var http_wrapper_1 = __importDefault(require("../utils/http-wrapper"));
var models_1 = require("../models");
var context_1 = __importDefault(require("../context"));
var helpers_1 = __importDefault(require("../helpers"));
var config_1 = __importDefault(require("../config"));
var Command = /** @class */ (function () {
    function Command(context) {
        this.context = context;
        this.results = new command_result_1.default();
        this._output = new output_printer_1.default();
        this.args = context.args;
        this.entity = context.entity;
        this.flags = context.rawFlags;
    }
    /**
     * @param results: CommandResult[]
     */
    Command.prototype.printResult = function (results) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._output.print(results);
                        if (!this.context.serverMessageLast) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._printAdditionalMessage()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    Command.prototype._printAdditionalMessage = function () {
        return __awaiter(this, void 0, void 0, function () {
            var lastMsg, res, msg, result, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        lastMsg = fs_1.existsSync(config_1.default.msgPath) ? fs_1.readFileSync(config_1.default.msgPath, 'utf8') : '';
                        if (!(lastMsg !== this.context.serverMessageLast)) return [3 /*break*/, 4];
                        fs_1.writeFileSync(config_1.default.msgPath, this.context.serverMessageLast, 'utf8');
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, new http_wrapper_1.default().get({ hostname: config_1.default.host, path: '/app/message' })];
                    case 2:
                        res = _b.sent();
                        msg = JSON.parse(res.body);
                        result = new command_result_1.default();
                        result.addAlert(models_1.OutputColor.Yellow, msg.title, msg.body);
                        this._output.print([result]);
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Command.prototype.requireDotMdb = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cwd, requiredPath, root, dotMdbPath, confirmed, flags, isProjectTypeDeterminable, context, ConfigCommand;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cwd = process.cwd();
                        requiredPath = path_1.join(cwd, '.mdb');
                        root = path_1.parse(requiredPath).root;
                        while (true) {
                            dotMdbPath = path_1.join(cwd, '.mdb');
                            if (fs_1.existsSync(dotMdbPath)) {
                                if (dotMdbPath !== requiredPath)
                                    throw new Error("Required .mdb file found at " + dotMdbPath + " - please change your current working directory and run the command again.");
                                return [2 /*return*/];
                            }
                            cwd = path_1.join(cwd, '..');
                            if (dotMdbPath === path_1.join(root, '.mdb'))
                                break;
                        }
                        return [4 /*yield*/, helpers_1.default.createConfirmationPrompt('Required .mdb file not found. Create?', true)];
                    case 1:
                        confirmed = _a.sent();
                        if (!confirmed) {
                            throw new Error('Required .mdb file not found. Probably not an mdb project - please change directory or initialize new project with `mdb init` command.');
                        }
                        flags = [];
                        isProjectTypeDeterminable = this.entity && config_1.default.projectTypes.includes(this.entity);
                        if (isProjectTypeDeterminable)
                            flags.push('-t', this.entity);
                        flags.push.apply(flags, this.flags);
                        context = new context_1.default('config', 'config', ['init'], flags);
                        ConfigCommand = require('./config-command');
                        return [4 /*yield*/, new ConfigCommand(context).execute()];
                    case 2:
                        _a.sent();
                        this.context.mdbConfig.load();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Command;
}());
exports.default = Command;
