"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var atob_1 = __importDefault(require("atob"));
var path_1 = require("path");
var fs_1 = require("fs");
var config_1 = __importDefault(require("./config"));
var package_managers_1 = require("./models/package-managers");
var package_manager_loader_1 = __importDefault(require("./utils/managers/package-manager-loader"));
var dot_mdb_config_manager_1 = __importDefault(require("./utils/managers/dot-mdb-config-manager"));
var http_wrapper_1 = __importDefault(require("./utils/http-wrapper"));
var Context = /** @class */ (function () {
    function Context(entity, command, args, flags) {
        this.userToken = '';
        this.mdbConfig = new dot_mdb_config_manager_1.default();
        this.packageJsonConfig = {};
        this.packageManager = null;
        this.serverMessageLast = '';
        this._nonArgFlags = new Set([
            'all', 'force', 'help'
        ]);
        this._flagExpansions = new Map([
            ['-h', '--help'],
            ['-a', '--all'],
            ['-f', '--force']
        ]);
        this._entity = entity;
        this._command = command;
        this._args = args;
        this._flags = flags;
        this._loadPackageJsonConfig();
        this.http = new http_wrapper_1.default();
    }
    Object.defineProperty(Context.prototype, "entity", {
        get: function () {
            return this._entity;
        },
        set: function (entity) {
            this._entity = entity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Context.prototype, "command", {
        get: function () {
            return this._command;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Context.prototype, "args", {
        get: function () {
            return this._args;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Context.prototype, "rawFlags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Context.prototype.getParsedFlags = function () {
        var flags = this.rawFlags.slice();
        var parsedFlags = {};
        while (flags.length) {
            var f = this._consumeNextFlag(flags);
            if (!this._isFlag(f)) {
                throw new Error("Unknown flag: " + f);
            }
            if (!this._isExpanded(f) && !this._isFlagExpansion(f)) {
                throw new Error("Unknown flag: " + f);
            }
            else if (this._isFlagExpansion(f)) {
                f = this._flagExpansions.get(f);
            }
            f = f.slice(2);
            if (this._isNonArgFlag(f)) {
                parsedFlags[f] = true;
            }
            else {
                parsedFlags[f] = this._consumeNextFlag(flags);
            }
        }
        return parsedFlags;
    };
    Context.prototype.registerNonArgFlags = function (nonArgFlags) {
        var _this = this;
        if (nonArgFlags === void 0) { nonArgFlags = []; }
        if (nonArgFlags.length === 0) {
            throw new Error('No non-arg flags to register!');
        }
        nonArgFlags.forEach(function (naf) { return _this._nonArgFlags.add(naf); });
    };
    Context.prototype.registerFlagExpansions = function (flagExpansions) {
        var _this = this;
        if (flagExpansions === void 0) { flagExpansions = {}; }
        if (Object.keys(flagExpansions).length === 0) {
            throw new Error('No flag expansions to register!');
        }
        Object.entries(flagExpansions).forEach(function (_a) {
            var flag = _a[0], expansion = _a[1];
            return _this._flagExpansions.set(flag, expansion);
        });
    };
    Context.prototype._consumeNextFlag = function (flags) {
        return flags.shift();
    };
    Context.prototype._isFlagExpansion = function (flag) {
        return this._flagExpansions.has(flag);
    };
    Context.prototype._isNonArgFlag = function (flag) {
        return this._nonArgFlags.has(flag);
    };
    Context.prototype._isExpanded = function (flag) {
        return flag.startsWith('--');
    };
    Context.prototype._isFlag = function (flag) {
        return flag.startsWith('-') || flag === '.';
    };
    Context.prototype.loadPackageManager = function () {
        return __awaiter(this, void 0, void 0, function () {
            var manager, _a, selectedManager;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.packageManager === null)) return [3 /*break*/, 2];
                        manager = this.mdbConfig.getValue('packageManager') || this.mdbConfig.getValue('packageManager', true);
                        _a = this;
                        return [4 /*yield*/, package_manager_loader_1.default.load(package_managers_1.PackageManagers[manager === null || manager === void 0 ? void 0 : manager.toUpperCase()])];
                    case 1:
                        _a.packageManager = _b.sent();
                        selectedManager = this.packageManager.cmdCommand;
                        this.mdbConfig.setValue('packageManager', selectedManager);
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    Context.prototype.authenticateUser = function (throwError) {
        if (throwError === void 0) { throwError = true; }
        var tokenDir = config_1.default.tokenDir, tokenFile = config_1.default.tokenFile;
        var tokenPath = path_1.join(tokenDir, tokenFile);
        try {
            this.userToken = fs_1.readFileSync(tokenPath, 'utf8');
        }
        catch (e) {
            if (throwError)
                throw new Error('Please login first');
        }
        if (this._isTokenExpired()) {
            fs_1.unlinkSync(tokenPath);
            this.userToken = '';
            if (throwError)
                throw new Error('Please login first');
        }
    };
    Context.prototype._isTokenExpired = function () {
        if (!this.userToken)
            return false;
        try {
            var _a = this.userToken.split('.'), jwtBody = _a[1];
            var exp = JSON.parse(atob_1.default(jwtBody)).exp;
            if (Date.now() >= exp * 1000)
                return true;
        }
        catch (e) {
            return true;
        }
        return false;
    };
    Context.prototype.authorizeUser = function () {
        return __awaiter(this, void 0, void 0, function () {
            var userPlanData, userPlan, projectsCount, countProjectsLimit;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getSubscriptionPlanData()];
                    case 1:
                        userPlanData = _a.sent();
                        userPlan = userPlanData.userPlan, projectsCount = userPlanData.projectsCount;
                        countProjectsLimit = userPlan.countProjectsLimit;
                        if (countProjectsLimit !== undefined && countProjectsLimit !== -1 && projectsCount >= countProjectsLimit) {
                            throw new Error("The maximum number of projects allowed for your account is " + countProjectsLimit + ". Please upgrade your subscription plan in order to create a new project.");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Context.prototype._getSubscriptionPlanData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var options, result, userPlanData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            hostname: config_1.default.host,
                            headers: { Authorization: "Bearer " + this.userToken },
                            path: '/auth/plan'
                        };
                        return [4 /*yield*/, this.http.get(options)];
                    case 1:
                        result = _a.sent();
                        userPlanData = JSON.parse(result.body).userPlanData;
                        return [2 /*return*/, userPlanData];
                }
            });
        });
    };
    Context.prototype.setPackageJsonValue = function (key, value, cwd) {
        if (cwd === void 0) { cwd = process.cwd(); }
        var settingsPath = path_1.join(cwd, 'package.json');
        // @ts-ignore
        this.packageJsonConfig[key] = value;
        try {
            fs_1.writeFileSync(settingsPath, JSON.stringify(this.packageJsonConfig, null, 2), 'utf8');
        }
        catch (e) {
            throw new Error("Could not save package.json key '" + key + "': " + e.message);
        }
    };
    Context.prototype._loadPackageJsonConfig = function (cwd) {
        if (cwd === void 0) { cwd = process.cwd(); }
        var settingsPath = path_1.join(cwd, 'package.json');
        try {
            var config_2 = fs_1.readFileSync(settingsPath, 'utf8');
            this.packageJsonConfig = JSON.parse(config_2);
        }
        catch (e) {
            this.packageJsonConfig = {};
        }
    };
    Context.prototype._addNonArgFlag = function (flag) {
        if (this._isFlag(flag) && this._isNonArgFlag(flag.substring(2)))
            this._flags.push(flag);
    };
    return Context;
}());
exports.default = Context;
