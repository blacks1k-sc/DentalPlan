"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
var open_1 = __importDefault(require("open"));
var inquirer_1 = require("inquirer");
var clipboardy_1 = require("clipboardy");
var models_1 = require("../models");
var publish_1 = require("./strategies/publish");
var receiver_1 = __importDefault(require("./receiver"));
var helpers_1 = __importDefault(require("../helpers"));
var config_1 = __importDefault(require("../config"));
var FrontendReceiver = /** @class */ (function (_super) {
    __extends(FrontendReceiver, _super);
    function FrontendReceiver(context, requireAuth) {
        if (requireAuth === void 0) { requireAuth = true; }
        var _this = _super.call(this, context) || this;
        _this.projectName = '';
        _this.starterCode = '';
        _this._publishRetries = 0;
        _this.loggedin = false;
        _this.context.authenticateUser(requireAuth);
        _this.loggedin = !!_this.context.userToken;
        _this.options = {
            hostname: config_1.default.host,
            headers: { Authorization: "Bearer " + _this.context.userToken }
        };
        _this.context.registerNonArgFlags(['all', 'force', 'many', 'ftp', 'open', 'test', 'ftp-only', 'help', 'override', 'cwd']);
        _this.context.registerFlagExpansions({
            '-t': '--test',
            '-o': '--open',
            '-n': '--name',
            '-h': '--help',
            '.': '--cwd',
        });
        _this.flags = _this.context.getParsedFlags();
        _this.args = _this.context.args;
        return _this;
    }
    FrontendReceiver.prototype.list = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projects, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.result.liveTextLine('Fetching frontend projects...');
                        return [4 /*yield*/, this.getFrontendProjects()];
                    case 1:
                        projects = _a.sent();
                        if (projects.length) {
                            result = projects.map(function (p) {
                                var deletedFromFTP = p.projectMeta.some(function (m) { return m.metaKey === '_uploaded_to_ftp' && m.metaValue === '0'; });
                                var projectURL = p.domainName ? "https://" + p.domainName : "https://" + config_1.default.projectsDomain + "/" + p.user.userNicename + "/" + p.projectName + "/";
                                return {
                                    'Project Name': p.projectName,
                                    'Project URL': deletedFromFTP ? 'Unavailable' : projectURL,
                                    'Published': p.status === models_1.ProjectStatus.PUBLISHED ? new Date(p.publishDate).toLocaleString() : '-',
                                    'Edited': new Date(p.editDate).toLocaleString(),
                                    'Repository': p.repoUrl ? p.repoUrl : '-',
                                    'Role': p.collaborationRole.name
                                };
                            });
                            this.result.addTable(result);
                        }
                        else {
                            this.result.addTextLine('You don\'t have any projects yet.');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    FrontendReceiver.prototype.getFrontendProjects = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.options.path = '/project';
                        return [4 /*yield*/, this.http.get(this.options)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, JSON.parse(result.body)
                                .filter(function (p) { return [models_1.ProjectStatus.CREATED, models_1.ProjectStatus.PUBLISHED].includes(p.status); })
                                .sort(function (a, b) { return a.editDate < b.editDate; })];
                }
            });
        });
    };
    FrontendReceiver.prototype.init = function (starterCode) {
        return __awaiter(this, void 0, void 0, function () {
            var initInCurrentFolder, projectPath, options, choices, validStarterCodes, err_1, initResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        initInCurrentFolder = this.context.args.some(function (arg) { return arg === '.'; });
                        if (initInCurrentFolder && fs_1.default.readdirSync(process.cwd()).length !== 0) {
                            return [2 /*return*/, this.result.addAlert(models_1.OutputColor.Red, 'Error', 'Destination path `.` already exists and is not an empty directory.')];
                        }
                        projectPath = process.cwd();
                        return [4 /*yield*/, this._getFrontendStartersOptions()];
                    case 1:
                        options = _a.sent();
                        choices = this._buildFrontendStartersList(options);
                        if (!starterCode) return [3 /*break*/, 2];
                        this.starterCode = starterCode;
                        this.projectName = this.flags.name || this.starterCode;
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.chooseStarter(choices, options)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        validStarterCodes = options.map(function (o) { return o.code; });
                        if (!validStarterCodes.includes(this.starterCode))
                            return [2 /*return*/, this.result.addAlert(models_1.OutputColor.Red, 'Error', "Invalid starter code, correct options are " + validStarterCodes.join(', '))];
                        if (!!initInCurrentFolder) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.checkProjectNameExists()];
                    case 5:
                        _a.sent();
                        projectPath = path_1.default.join(process.cwd(), this.projectName);
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, helpers_1.default.eraseDirectories(projectPath)];
                    case 7:
                        _a.sent();
                        return [3 /*break*/, 9];
                    case 8:
                        err_1 = _a.sent();
                        return [2 /*return*/, this.result.addAlert(models_1.OutputColor.Red, 'Error', err_1)];
                    case 9:
                        this.result.addTextLine("Project starter will be downloaded to " + projectPath + " folder");
                        return [4 /*yield*/, this.downloadProjectStarter(projectPath)];
                    case 10:
                        initResult = _a.sent();
                        this.result.addAlert(models_1.OutputColor.Green, 'Success', initResult);
                        this.context.mdbConfig.setValue('projectName', this.projectName);
                        this.context.mdbConfig.setValue('meta.starter', this.starterCode);
                        this.context.mdbConfig.setValue('meta.type', 'frontend');
                        this.context.mdbConfig.setValue('hash', helpers_1.default.generateRandomString());
                        this.context.mdbConfig.save(projectPath);
                        this.context._loadPackageJsonConfig(projectPath);
                        return [4 /*yield*/, helpers_1.default.createJenkinsfile(projectPath, this.context.packageJsonConfig.scripts !== undefined && this.context.packageJsonConfig.scripts.test !== undefined)];
                    case 11:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FrontendReceiver.prototype.chooseStarter = function (choices, options) {
        return __awaiter(this, void 0, void 0, function () {
            var promptShownCount, _a, project;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        promptShownCount = 0;
                        _b.label = 1;
                    case 1:
                        if (promptShownCount++ >= 10) {
                            return [2 /*return*/, this.result.addTextLine('Please run `mdb starter ls` to see available packages.')];
                        }
                        _a = this;
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose project to initialize', choices)];
                    case 2:
                        _a.starterCode = _b.sent();
                        this.projectName = this.flags.name || this.starterCode;
                        project = options.find(function (o) { return o.code === _this.starterCode; });
                        if (project.available)
                            return [3 /*break*/, 4];
                        else
                            this.result.liveAlert(models_1.OutputColor.Yellow, 'Warning!', "You cannot create this project. Please visit https://mdbootstrap.com/my-orders/ and make sure it is available for you.");
                        _b.label = 3;
                    case 3:
                        if (promptShownCount <= 10) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FrontendReceiver.prototype._getFrontendStartersOptions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParamAvailable, freeStarters, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParamAvailable = !this.flags.all ? '&available=true' : '';
                        freeStarters = this.loggedin ? '' : '/free';
                        this.options.path = "/packages/starters" + freeStarters + "?type=frontend" + queryParamAvailable;
                        return [4 /*yield*/, this.http.get(this.options)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, JSON.parse(result.body)];
                }
            });
        });
    };
    FrontendReceiver.prototype._buildFrontendStartersList = function (options) {
        var starters = options.reduce(function (res, curr) {
            res[curr.category + " " + curr.license] = res[curr.category + " " + curr.license] || [];
            res[curr.category + " " + curr.license].push({
                name: curr.displayName,
                short: curr.code,
                value: curr.code
            });
            return res;
        }, {});
        return Object.keys(starters).reduce(function (res, curr) {
            // @ts-ignore
            res.push.apply(res, __spreadArray([new inquirer_1.Separator("---- " + curr + " ----")], starters[curr]));
            return res;
        }, []);
    };
    FrontendReceiver.prototype.checkProjectNameExists = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projectPath, confirmed, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        projectPath = path_1.default.join(process.cwd(), this.projectName);
                        if (!fs_1.default.existsSync(projectPath)) return [3 /*break*/, 4];
                        return [4 /*yield*/, helpers_1.default.createConfirmationPrompt("Folder " + this.projectName + " already exists, do you want to rename project you are creating now?", true)];
                    case 1:
                        confirmed = _b.sent();
                        if (!confirmed) return [3 /*break*/, 4];
                        _a = this;
                        return [4 /*yield*/, helpers_1.default.createTextPrompt('Enter new project name', 'Project name must not be empty.')];
                    case 2:
                        _a.projectName = _b.sent();
                        return [4 /*yield*/, this.checkProjectNameExists()];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FrontendReceiver.prototype.downloadProjectStarter = function (projectPath) {
        return __awaiter(this, void 0, void 0, function () {
            var freeStarters, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        freeStarters = this.loggedin ? '' : '/free';
                        this.options.path = "/packages/download" + freeStarters + "/" + this.starterCode;
                        return [4 /*yield*/, helpers_1.default.downloadFromFTP(this.http, this.options, projectPath)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    FrontendReceiver.prototype.publish = function () {
        return __awaiter(this, void 0, void 0, function () {
            var err_2, packageJsonEmpty, result, e_1, packageJsonEmpty_1, result, e_2, strategy, strategy, remoteUrl, useGitlab, strategy_1, strategy;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 4]);
                        return [4 /*yield*/, this.context.authorizeUser()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        err_2 = _a.sent();
                        return [4 /*yield*/, this.showPricingLimitError(err_2.message || err_2)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                    case 4:
                        packageJsonEmpty = this.context.packageJsonConfig.name === undefined;
                        if (!packageJsonEmpty) return [3 /*break*/, 9];
                        this.result.liveTextLine('package.json file is required. Creating...');
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.createPackageJson()];
                    case 6:
                        result = _a.sent();
                        this.context._loadPackageJsonConfig();
                        this.result.liveTextLine(result);
                        return [3 /*break*/, 8];
                    case 7:
                        e_1 = _a.sent();
                        this.result.addAlert(models_1.OutputColor.Red, 'Error', e_1);
                        return [2 /*return*/];
                    case 8:
                        packageJsonEmpty_1 = this.context.packageJsonConfig.name === undefined;
                        if (packageJsonEmpty_1) {
                            throw new Error('package.json file is required.'); // in case Ctrl+C
                        }
                        _a.label = 9;
                    case 9:
                        if (!this.flags.test) return [3 /*break*/, 13];
                        _a.label = 10;
                    case 10:
                        _a.trys.push([10, 12, , 13]);
                        return [4 /*yield*/, this.runTests()];
                    case 11:
                        result = _a.sent();
                        this.result.addAlert(models_1.OutputColor.Green, 'Success', result);
                        return [3 /*break*/, 13];
                    case 12:
                        e_2 = _a.sent();
                        this.result.addAlert(models_1.OutputColor.Red, 'Error', e_2);
                        return [2 /*return*/];
                    case 13:
                        if (!this.context.mdbConfig.getValue('hash')) {
                            this.context.mdbConfig.setValue('hash', helpers_1.default.generateRandomString());
                            this.context.mdbConfig.save();
                        }
                        if (!this.context.mdbConfig.getValue('projectName')) {
                            this.context.mdbConfig.setValue('projectName', this.context.packageJsonConfig.name);
                            this.context.mdbConfig.save();
                        }
                        if (!(this.flags.ftp || this.context.mdbConfig.getValue('publishMethod') === 'ftp')) return [3 /*break*/, 15];
                        strategy = new publish_1.FtpPublishStrategy(this.context, this.result);
                        return [4 /*yield*/, this._handlePublication(strategy)];
                    case 14:
                        _a.sent();
                        return [3 /*break*/, 22];
                    case 15:
                        if (!(this.context.mdbConfig.getValue('publishMethod') === 'pipeline')) return [3 /*break*/, 17];
                        strategy = new publish_1.PipelinePublishStrategy(this.context, this.result, this.git, this.http, this.options);
                        return [4 /*yield*/, this._handlePublication(strategy)];
                    case 16:
                        _a.sent();
                        return [3 /*break*/, 22];
                    case 17:
                        remoteUrl = this.git.getCurrentRemoteUrl();
                        if (!(remoteUrl !== '')) return [3 /*break*/, 20];
                        return [4 /*yield*/, helpers_1.default.createConfirmationPrompt('This project seems to be created on MDB Go GitLab server. Do you want to use our pipeline to publish your project now?')];
                    case 18:
                        useGitlab = _a.sent();
                        if (!useGitlab) return [3 /*break*/, 20];
                        strategy_1 = new publish_1.PipelinePublishStrategy(this.context, this.result, this.git, this.http, this.options);
                        return [4 /*yield*/, this._handlePublication(strategy_1)];
                    case 19:
                        _a.sent();
                        return [2 /*return*/];
                    case 20:
                        strategy = new publish_1.FtpPublishStrategy(this.context, this.result);
                        return [4 /*yield*/, this._handlePublication(strategy)];
                    case 21:
                        _a.sent();
                        _a.label = 22;
                    case 22: return [2 /*return*/];
                }
            });
        });
    };
    FrontendReceiver.prototype.createPackageJson = function (cwd) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.context.loadPackageManager()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.context.packageManager.init(cwd)];
                }
            });
        });
    };
    FrontendReceiver.prototype.runTests = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.context.loadPackageManager()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.context.packageManager.test()];
                }
            });
        });
    };
    FrontendReceiver.prototype._handlePublication = function (strategy) {
        return __awaiter(this, void 0, void 0, function () {
            var response, _a, message, url, e_3, override, _b, domain;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this._publishRetries++;
                        if (this._publishRetries > 5) {
                            return [2 /*return*/, this.result.addAlert(models_1.OutputColor.Red, 'Error', 'Too many retries. Try again running the publish command.')];
                        }
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 4, , 15]);
                        return [4 /*yield*/, strategy.publish()];
                    case 2:
                        response = _c.sent();
                        _a = JSON.parse(response.body), message = _a.message, url = _a.url;
                        return [4 /*yield*/, clipboardy_1.write(url)];
                    case 3:
                        _c.sent();
                        this.result.addAlert(models_1.OutputColor.GreyBody, message, ' [copied to clipboard]');
                        this.result.addTextLine('');
                        if (!this.context.mdbConfig.getValue('domain'))
                            this.result.addAlert(models_1.OutputColor.Blue, 'Info', 'Your URL has been generated based on your username and project name. You can change it by providing the (sub)domain of your choice by running the following command: `mdb config domain <name>`.');
                        if (strategy instanceof publish_1.PipelinePublishStrategy)
                            this.result.addAlert(models_1.OutputColor.Blue, 'Info', 'It may take a while to deploy your app because of running pipeline. You can check pipeline status at https://jenkins.mdbgo.com/');
                        if (this.flags.open && !!url)
                            open_1.default(url);
                        return [3 /*break*/, 15];
                    case 4:
                        e_3 = _c.sent();
                        if (!(e_3.statusCode === models_1.CliStatus.CONFLICT && e_3.message.includes('project name'))) return [3 /*break*/, 10];
                        return [4 /*yield*/, helpers_1.default.createConfirmationPrompt(e_3.message + " Override?", false)];
                    case 5:
                        override = _c.sent();
                        if (!override) return [3 /*break*/, 6];
                        this.context._addNonArgFlag('--override');
                        return [3 /*break*/, 8];
                    case 6:
                        _b = this;
                        return [4 /*yield*/, helpers_1.default.createTextPrompt('Please choose a different project name', 'Project name must not be empty.')];
                    case 7:
                        _b.projectName = _c.sent();
                        this.context.setPackageJsonValue('name', this.projectName);
                        this.context.mdbConfig.setValue('projectName', this.projectName);
                        this.context.mdbConfig.save();
                        _c.label = 8;
                    case 8: return [4 /*yield*/, this._handlePublication(strategy)];
                    case 9:
                        _c.sent();
                        return [3 /*break*/, 14];
                    case 10:
                        if (!([models_1.CliStatus.CONFLICT, models_1.CliStatus.FORBIDDEN].includes(e_3.statusCode) && e_3.message.includes('domain name'))) return [3 /*break*/, 13];
                        this.result.liveAlert(models_1.OutputColor.Red, 'Error', e_3.message);
                        return [4 /*yield*/, helpers_1.default.createTextPrompt('Enter new domain name', 'Invalid domain name. Do not add the http(s):// part. If you are using *.mdbgo.io subdomain, don\'t omit the .mdbgo.io part as it won\'t work without it.', this.validateDomain)];
                    case 11:
                        domain = _c.sent();
                        this.context.mdbConfig.setValue('domain', domain);
                        this.context.mdbConfig.save();
                        return [4 /*yield*/, this._handlePublication(strategy)];
                    case 12:
                        _c.sent();
                        return [3 /*break*/, 14];
                    case 13:
                        this.result.addAlert(models_1.OutputColor.Red, 'Error', "Could not publish: " + (e_3.message || e_3));
                        _c.label = 14;
                    case 14: return [3 /*break*/, 15];
                    case 15: return [2 /*return*/];
                }
            });
        });
    };
    FrontendReceiver.prototype.delete = function (projectToDelete) {
        if (projectToDelete === void 0) { projectToDelete = this.flags.name; }
        return __awaiter(this, void 0, void 0, function () {
            var projects, choices, projectName, _a, projectExists, name, _b, query, result, err_3;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.getFrontendProjects()];
                    case 1:
                        projects = _c.sent();
                        if (projects.length === 0) {
                            this.result.addTextLine('You don\'t have any projects yet.');
                            return [2 /*return*/, false];
                        }
                        choices = projects.map(function (p) { return ({ name: p.projectName }); });
                        _a = projectToDelete;
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose project', choices)];
                    case 2:
                        _a = (_c.sent());
                        _c.label = 3;
                    case 3:
                        projectName = _a;
                        projectExists = projects.some(function (p) { return p.projectName === projectName; });
                        if (!projectExists) {
                            this.result.addTextLine("Project " + projectName + " not found.");
                            return [2 /*return*/, false];
                        }
                        _b = this.flags.force;
                        if (_b) return [3 /*break*/, 5];
                        return [4 /*yield*/, helpers_1.default.createTextPrompt('This operation cannot be undone. Confirm deleting selected project by typing its name:', 'Project name must not be empty.')];
                    case 4:
                        _b = (_c.sent());
                        _c.label = 5;
                    case 5:
                        name = _b;
                        if (!this.flags.force && name !== projectName) {
                            this.result.addTextLine('The names do not match.');
                            return [2 /*return*/, false];
                        }
                        this.result.liveTextLine("Unpublishing project " + projectName + "...");
                        query = this.flags['ftp-only'] ? '?ftp=true' : '';
                        this.options.path = "/project/unpublish/" + projectName + query;
                        _c.label = 6;
                    case 6:
                        _c.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, this.http.delete(this.options)];
                    case 7:
                        result = _c.sent();
                        this.result.addAlert(models_1.OutputColor.Green, 'Success', result.body);
                        return [2 /*return*/, true];
                    case 8:
                        err_3 = _c.sent();
                        this.result.addAlert(models_1.OutputColor.Red, 'Error', "Could not delete " + projectName + ": " + err_3.message);
                        return [2 /*return*/, false];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    FrontendReceiver.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            var projects, downloadToCurrentDir, choices, projectName, _a, project, result, repoUrlWithLogin, projectPath, query, err_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getFrontendProjects()];
                    case 1:
                        projects = _b.sent();
                        if (projects.length === 0) {
                            return [2 /*return*/, this.result.addTextLine('You don\'t have any projects yet.')];
                        }
                        downloadToCurrentDir = this.flags.cwd || this.args.some(function (arg) { return arg === '.'; });
                        if (downloadToCurrentDir && fs_1.default.readdirSync(process.cwd()).length !== 0) {
                            return [2 /*return*/, this.result.addAlert(models_1.OutputColor.Red, 'Error', 'Destination path `.` already exists and is not an empty directory.')];
                        }
                        choices = projects.map(function (p) { return ({ name: p.projectName }); });
                        _a = this.flags.name || this._getNameFromArgs();
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, helpers_1.default.createListPrompt('Choose project', choices)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3:
                        projectName = _a;
                        project = projects.find(function (p) { return p.projectName === projectName; });
                        if (!project)
                            return [2 /*return*/, this.result.addTextLine("Project " + projectName + " not found.")];
                        _b.label = 4;
                    case 4:
                        _b.trys.push([4, 10, , 11]);
                        if (!(project.repoUrl && !this.flags.ftp)) return [3 /*break*/, 6];
                        repoUrlWithLogin = project.repoUrl.replace(/^https:\/\//, "https://" + project.user.userLogin + "@");
                        return [4 /*yield*/, this.git.clone(repoUrlWithLogin, downloadToCurrentDir)];
                    case 5:
                        result = _b.sent();
                        return [3 /*break*/, 9];
                    case 6:
                        projectPath = path_1.default.join(process.cwd(), projectName);
                        return [4 /*yield*/, helpers_1.default.eraseDirectories(projectPath)];
                    case 7:
                        _b.sent();
                        query = this.flags.force ? '?force=true' : '';
                        this.options.path = "/project/get/" + projectName + query;
                        return [4 /*yield*/, helpers_1.default.downloadFromFTP(this.http, this.options, process.cwd())];
                    case 8:
                        result = _b.sent();
                        if (downloadToCurrentDir) {
                            fs_extra_1.default.copySync(projectPath, process.cwd());
                            fs_extra_1.default.removeSync(projectPath);
                        }
                        _b.label = 9;
                    case 9:
                        this.result.addAlert(models_1.OutputColor.Green, 'Success', result);
                        return [3 /*break*/, 11];
                    case 10:
                        err_4 = _b.sent();
                        this.result.addAlert(models_1.OutputColor.Red, 'Error', "Could not download " + projectName + ": " + (err_4.message || err_4));
                        return [3 /*break*/, 11];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    FrontendReceiver.prototype._getNameFromArgs = function () {
        var args = this.args.filter(function (a) { return a !== '.'; });
        return args[0];
    };
    return FrontendReceiver;
}(receiver_1.default));
exports.default = FrontendReceiver;
