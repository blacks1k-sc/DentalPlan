"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NormalConfigStrategy = void 0;
var config_strategy_1 = __importDefault(require("./config-strategy"));
var NormalConfigStrategy = /** @class */ (function (_super) {
    __extends(NormalConfigStrategy, _super);
    function NormalConfigStrategy(context) {
        var _this = _super.call(this) || this;
        _this.context = context;
        return _this;
    }
    NormalConfigStrategy.prototype.setValue = function (name, value) {
        this._validate(name, value);
        var global = this._getGlobalFlag();
        this.context.mdbConfig.setValue(name, value, global);
        this.context.mdbConfig.save(process.cwd(), global);
        return '';
    };
    NormalConfigStrategy.prototype.unsetValue = function (name) {
        var global = this._getGlobalFlag();
        this.context.mdbConfig.unsetValue(name, global);
        this.context.mdbConfig.save(process.cwd(), global);
        return '';
    };
    NormalConfigStrategy.prototype._getGlobalFlag = function () {
        var flags = this.context.getParsedFlags();
        return flags.global ? flags.global : false;
    };
    NormalConfigStrategy.prototype._validate = function (name, value) {
        switch (name) {
            case 'packageManager':
                if (!['npm', 'yarn'].includes(value))
                    throw new Error('Invalid value, allowed package managers: npm, yarn');
                break;
            case 'publishMethod':
                if (!['ftp', 'pipeline'].includes(value))
                    throw new Error('Invalid value, allowed publish methods: ftp, pipeline');
                break;
            default:
                break;
        }
    };
    return NormalConfigStrategy;
}(config_strategy_1.default));
exports.NormalConfigStrategy = NormalConfigStrategy;
