"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FtpPublishStrategy = void 0;
var ora_1 = __importDefault(require("ora"));
var path_1 = require("path");
var fs_extra_1 = require("fs-extra");
var fs_1 = require("fs");
var http_wrapper_1 = __importDefault(require("../../../utils/http-wrapper"));
var models_1 = require("../../../models");
var config_1 = __importDefault(require("../../../config"));
var helpers_1 = __importDefault(require("../../../helpers"));
var FtpPublishStrategy = /** @class */ (function () {
    function FtpPublishStrategy(context, result) {
        this.context = context;
        this.result = result;
        this.cwd = process.cwd();
        this.flags = {};
        this.sent = '0';
        this.userToken = this.context.userToken;
    }
    FtpPublishStrategy.prototype.publish = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.flags = this.context.getParsedFlags();
                        this._loadMetaData();
                        return [4 /*yield*/, this.buildProject()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.uploadFiles()];
                }
            });
        });
    };
    FtpPublishStrategy.prototype._loadMetaData = function () {
        this.metaData = {
            packageName: this.context.mdbConfig.getValue('meta.starter') || '',
            projectName: this.context.mdbConfig.getValue('projectName') || '',
            starter: this.flags.variant || this.context.mdbConfig.getValue('meta.starter') || '',
            domain: this.context.mdbConfig.getValue('domain') || '',
            platform: this.context.mdbConfig.getValue('backend.platform') || '',
            hash: this.context.mdbConfig.getValue('hash') || ''
        };
    };
    FtpPublishStrategy.prototype.buildProject = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result, distPath, buildPath, packageJson, isAngular, isReact, isVue, packageJsonPath, packageJson_1, buildScript, appJsPath, appJsFile, appJsFile, regex;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = '';
                        distPath = path_1.join(this.cwd, 'dist');
                        buildPath = path_1.join(this.cwd, 'build');
                        packageJson = this.context.packageJsonConfig;
                        if (!packageJson.scripts || !packageJson.scripts.build) {
                            return [2 /*return*/];
                        }
                        isAngular = packageJson.dependencies && !!packageJson.dependencies['@angular/core'];
                        isReact = packageJson.dependencies && !!packageJson.dependencies.react;
                        isVue = packageJson.dependencies && !!packageJson.dependencies.vue;
                        if (!isAngular) return [3 /*break*/, 5];
                        packageJsonPath = path_1.join(this.cwd, 'package.json');
                        return [4 /*yield*/, helpers_1.default.deserializeJsonFile(packageJsonPath)];
                    case 1:
                        packageJson_1 = _a.sent();
                        buildScript = packageJson_1.scripts.build;
                        packageJson_1.scripts.build = buildScript + " --output-path dist --base-href .";
                        return [4 /*yield*/, helpers_1.default.serializeJsonFile('package.json', packageJson_1)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.runBuildScript()];
                    case 3:
                        result = _a.sent();
                        packageJson_1.scripts.build = buildScript;
                        return [4 /*yield*/, helpers_1.default.serializeJsonFile('package.json', packageJson_1)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 13];
                    case 5:
                        if (!isReact) return [3 /*break*/, 9];
                        appJsPath = path_1.join(this.cwd, 'src', 'App.js');
                        if (fs_1.existsSync(appJsPath)) {
                            appJsFile = fs_1.readFileSync(appJsPath, 'utf8');
                            appJsFile = appJsFile.replace(/<Router/g, "<Router basename='/dist'");
                            fs_1.writeFileSync(appJsPath, appJsFile, 'utf8');
                        }
                        packageJson.homepage = "https://" + this.metaData.domain + "/dist/";
                        return [4 /*yield*/, helpers_1.default.serializeJsonFile('package.json', packageJson)];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, this.runBuildScript()];
                    case 7:
                        result = _a.sent();
                        if (fs_1.existsSync(appJsPath)) {
                            appJsFile = fs_1.readFileSync(appJsPath, 'utf8');
                            regex = new RegExp("<Router basename='/dist'", 'g');
                            appJsFile = appJsFile.replace(regex, '<Router');
                            fs_1.writeFileSync(appJsPath, appJsFile, 'utf8');
                        }
                        delete packageJson.homepage;
                        return [4 /*yield*/, helpers_1.default.serializeJsonFile('package.json', packageJson)];
                    case 8:
                        _a.sent();
                        if (fs_1.existsSync(buildPath)) {
                            fs_extra_1.moveSync(buildPath, distPath, { overwrite: true });
                        }
                        return [3 /*break*/, 13];
                    case 9:
                        if (!isVue) return [3 /*break*/, 11];
                        return [4 /*yield*/, this.runBuildScript()];
                    case 10:
                        result = _a.sent();
                        return [3 /*break*/, 13];
                    case 11: return [4 /*yield*/, this.runBuildScript()];
                    case 12:
                        result = _a.sent();
                        this.result.addAlert(models_1.OutputColor.Yellow, 'Warning', 'This is not MDB JARV project and there is no guarantee that it will work properly after publishing. In case of problems, please write to our support https://mdbootstrap.com/support/.');
                        if (!fs_1.existsSync(distPath) && !fs_1.existsSync(buildPath)) {
                            throw new Error('Build folder not found.');
                        }
                        _a.label = 13;
                    case 13:
                        this.result.addAlert(models_1.OutputColor.Green, 'Success', result);
                        return [2 /*return*/];
                }
            });
        });
    };
    FtpPublishStrategy.prototype.runBuildScript = function (directoryPath) {
        if (directoryPath === void 0) { directoryPath = this.cwd; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.context.loadPackageManager()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.context.packageManager.build(directoryPath)];
                }
            });
        });
    };
    FtpPublishStrategy.prototype.uploadFiles = function () {
        var _this = this;
        var spinner = ora_1.default({ text: 'Uploading files' });
        spinner.start();
        return new Promise(function (resolve, reject) {
            var headers = {
                'Authorization': "Bearer " + _this.userToken
            };
            if (_this.context.entity === 'backend')
                headers['x-mdb-cli-backend-technology'] = _this.flags.platform || _this.metaData.platform;
            if (_this.context.entity === 'wordpress')
                headers['x-mdb-cli-wp-starter'] = _this.metaData.starter;
            headers['x-mdb-cli-project-name'] = _this.metaData.projectName;
            headers['x-mdb-cli-package-name'] = _this.metaData.packageName;
            headers['x-mdb-cli-domain-name'] = _this.metaData.domain;
            headers['x-mdb-cli-dot-mdb-hash'] = _this.metaData.hash;
            headers['x-mdb-cli-override'] = _this.flags.override ? 'true' : '';
            var archive = helpers_1.default.archiveProject('zip', { zlib: { level: 9 } });
            var http = new http_wrapper_1.default();
            var request = http.createRequest({
                hostname: config_1.default.host,
                path: '/project/publish',
                method: 'POST',
                headers: headers
            }, function (err, response) {
                if (err) {
                    spinner.stop();
                    return reject({ message: err.message, statusCode: err.statusCode });
                }
                _this._convertToMb(archive.pointer());
                spinner.succeed("Uploading files | " + _this.sent + " Mb");
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    _this.result.addTextLine("Sent " + _this.sent + " Mb");
                }
                resolve(response);
            });
            archive.on('error', reject);
            archive.on('warning', function (warn) { return _this.result.addAlert(models_1.OutputColor.Yellow, 'Warning', warn.data); });
            archive.on('progress', function () {
                _this._convertToMb(archive.pointer());
                spinner.text = "Uploading files | " + _this.sent + " Mb";
            });
            archive.pipe(request);
            archive.glob('**', {
                cwd: _this.cwd,
                ignore: ['node_modules/**', '.git/**', '.gitignore', 'Dockerfile', '.dockerignore', '.idea/**'],
                dot: true
            });
            archive.finalize();
        });
    };
    FtpPublishStrategy.prototype._convertToMb = function (pointer) {
        var num = pointer / Math.pow(1024, 2);
        this.sent = num.toFixed(3);
    };
    return FtpPublishStrategy;
}());
exports.FtpPublishStrategy = FtpPublishStrategy;
