'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var receiver_1 = __importDefault(require("./receiver"));
var models_1 = require("../models");
var config_1 = require("./strategies/config");
var ConfigReceiver = /** @class */ (function (_super) {
    __extends(ConfigReceiver, _super);
    function ConfigReceiver(context) {
        var _this = _super.call(this, context) || this;
        _this.context.registerNonArgFlags(['enable-ssl', 'global', 'leave', 'unset', 'list']);
        _this.context.registerFlagExpansions({ '-ls': '--list', '-n': '--name', '-p': '--platform', '-t': '--type' });
        return _this;
    }
    ConfigReceiver.prototype.changeConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, name, value, flags, result, result, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.context.args, name = _a[0], value = _a[1];
                        flags = this.context.getParsedFlags();
                        this.setStrategy(name);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 7]);
                        if (!flags.unset) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.strategy.unsetValue(name, value)];
                    case 2:
                        result = _b.sent();
                        this.result.addTextLine(result || "Config key '" + name + "' has been deleted.");
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.strategy.setValue(name, value)];
                    case 4:
                        result = _b.sent();
                        if (Array.isArray(result))
                            this.result.addTable(result);
                        else
                            this.result.addTextLine(result || "Config value '" + name + "' has been set to '" + this.context.mdbConfig.getValue(name) + "'.");
                        _b.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        e_1 = _b.sent();
                        this.result.addAlert(models_1.OutputColor.Red, 'Error', "Could not change config: " + e_1.message);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    ConfigReceiver.prototype.setStrategy = function (name) {
        switch (name) {
            case 'domain':
                this.strategy = new config_1.DomainConfigStrategy(this.context, this.result);
                break;
            case 'init':
                this.strategy = new config_1.InitConfigStrategy(this.context);
                break;
            case 'member':
                this.strategy = new config_1.MemberConfigStrategy(this.context);
                break;
            case 'projectName':
                this.strategy = new config_1.ProjectNameConfigStrategy(this.context);
                break;
            default:
                this.strategy = new config_1.NormalConfigStrategy(this.context);
                break;
        }
    };
    return ConfigReceiver;
}(receiver_1.default));
exports.default = ConfigReceiver;
