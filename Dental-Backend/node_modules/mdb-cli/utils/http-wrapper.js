'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __importDefault(require("../config"));
var https_1 = __importDefault(require("https"));
var isTestEnv = config_1.default.env === 'test' || config_1.default.env === 'dev';
var packageJson = isTestEnv ? require('../../package.json') : require('../package.json');
var HttpWrapper = /** @class */ (function () {
    function HttpWrapper(context) {
        if (context === void 0) { context = null; }
        this.context = context;
    }
    HttpWrapper.prototype.createRawRequest = function (options, callback) {
        var _this = this;
        if (options.headers) {
            options.headers['x-mdb-cli-version'] = packageJson.version;
            options.headers['x-mdb-cli-client-type'] = 'cli';
        }
        else {
            options.headers = {
                'x-mdb-cli-version': packageJson.version,
                'x-mdb-cli-client-type': 'cli'
            };
        }
        if (options.hostname === config_1.default.host)
            options.path = "" + config_1.default.apiPath + options.path;
        if (isTestEnv && !!config_1.default.port)
            options.port = config_1.default.port;
        return https_1.default.request(options, function (response) {
            if (_this.context && response.headers['x-mdb-cli-message-last'])
                _this.context.serverMessageLast = response.headers['x-mdb-cli-message-last'];
            if (callback) {
                callback(response);
            }
        });
    };
    HttpWrapper.prototype.createRequest = function (options, callback) {
        var _this = this;
        if (options.headers) {
            options.headers['x-mdb-cli-version'] = packageJson.version;
            options.headers['x-mdb-cli-client-type'] = 'cli';
        }
        else {
            options.headers = {
                'x-mdb-cli-version': packageJson.version,
                'x-mdb-cli-client-type': 'cli'
            };
        }
        if (options.hostname === config_1.default.host)
            options.path = "" + config_1.default.apiPath + options.path;
        if (isTestEnv && !!config_1.default.port)
            options.port = config_1.default.port;
        return https_1.default.request(options, function (response) {
            if (_this.context && response.headers['x-mdb-cli-message-last'])
                _this.context.serverMessageLast = response.headers['x-mdb-cli-message-last'];
            var result = '';
            response.on('data', function (chunk) {
                result += Buffer.from(chunk).toString('utf8');
            });
            response.on('end', function () {
                var _a = response.statusCode, statusCode = _a === void 0 ? -1 : _a;
                if (statusCode >= 200 && statusCode < 400) {
                    callback(null, { body: result, headers: response.headers, statusCode: statusCode });
                }
                else {
                    callback({ message: result, statusCode: statusCode }, null);
                }
            });
        });
    };
    HttpWrapper.prototype.request = function (options) {
        var _this = this;
        if (options.headers) {
            options.headers['x-mdb-cli-version'] = packageJson.version;
            options.headers['x-mdb-cli-client-type'] = 'cli';
        }
        else {
            options.headers = {
                'x-mdb-cli-version': packageJson.version,
                'x-mdb-cli-client-type': 'cli'
            };
        }
        if (options.hostname === config_1.default.host)
            options.path = "" + config_1.default.apiPath + options.path;
        if (isTestEnv && !!config_1.default.port)
            options.port = config_1.default.port;
        return new Promise(function (resolve, reject) {
            var request = https_1.default.request(options, function (response) {
                if (_this.context && response.headers['x-mdb-cli-message-last'])
                    _this.context.serverMessageLast = response.headers['x-mdb-cli-message-last'];
                var result = '';
                response.on('data', function (chunk) {
                    result += Buffer.from(chunk).toString('utf8');
                });
                response.on('end', function () {
                    var _a = response.statusCode, statusCode = _a === void 0 ? -1 : _a;
                    if (statusCode >= 200 && statusCode < 400) {
                        resolve({ body: result, headers: response.headers, statusCode: statusCode });
                    }
                    else {
                        reject({ message: result, statusCode: statusCode });
                    }
                });
            });
            request.on('error', function (error) { return reject(error); });
            var requestData = typeof options.data !== 'string' ? JSON.stringify(options.data) : options.data;
            request.write(requestData || '');
            request.end();
        });
    };
    HttpWrapper.prototype.get = function (options) {
        options.method = 'GET';
        return this.request(options);
    };
    HttpWrapper.prototype.post = function (options) {
        options.method = 'POST';
        return this.request(options);
    };
    HttpWrapper.prototype.put = function (options) {
        options.method = 'PUT';
        return this.request(options);
    };
    HttpWrapper.prototype.delete = function (options) {
        options.method = 'DELETE';
        return this.request(options);
    };
    return HttpWrapper;
}());
exports.default = HttpWrapper;
